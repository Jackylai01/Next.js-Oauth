import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import { getSession, signOut, useSession } from "next-auth/react";

export default function Home() {
  const { data: session } = useSession();

  //處理登出

  const handleSignOut = () => {
    signOut();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {session ? User({ session, handleSignOut }) : Guest()}
    </div>
  );
}

//Guest

function Guest() {
  return (
    <main className="container mx-auto text-center py-20">
      <h3 className="text-3xl font-bold m-5">Guest HomePage</h3>
      <div className="flex justify-center">
        <Link href={"/login"}>
          <b className="mt-5 px-10 py-1 rounded-sm bg-indigo-500 text-gray-100">
            Sign in
          </b>
        </Link>
      </div>
    </main>
  );
}

//Authorize User

function User({ session, handleSignOut }) {
  return (
    <main className="container mx-auto text-center py-20">
      <h3 className="text-4xl font-bold">Authorize User Homepage</h3>

      <div className="details">
        <h5>{session.user.name}</h5>
        <h5>{session.user.email}</h5>
      </div>
      <br />
      <div className="flex justify-center">
        <button onClick={handleSignOut}>
          <b className="mt-5 px-10 py-1 rounded-sm bg-indigo-500 text-gray-50 ">
            登出
          </b>
        </button>
      </div>
      <br />
      <div className="flex justify-center">
        <Link href={"/profile"}>
          <b className="mt-5 px-10 py-1 rounded-sm bg-indigo-500 text-gray-50">
            Profile Page
          </b>
        </Link>
      </div>
    </main>
  );
}

//SSR 渲染-保護路由-登入後才到的了首頁
export async function getServerSideProps({ req }) {
  const session = await getSession({ req });

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}
